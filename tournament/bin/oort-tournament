#!/usr/bin/env ruby
require 'saulabs/trueskill'
require 'oort-tournament/db'
require 'tempfile'
require 'gist'
require 'trollop'

include Saulabs::TrueSkill

SCENARIO = "scenarios/basic.json"

$opts = Trollop.options do
  banner <<-EOS
Oort tournament runner

Usage:
       oort-tournament [options]

where [options] are:
EOS

  opt :iters, "Number of games to run", :short => 'i', :default => 1
  opt :database, "Location of tournament database", :short => 'D', :default => 'oort-tournament.yaml'
end

def run_game
  db = OortTournament::DB.new $opts[:database]

  seed = rand(10000000)
  puts "seed: #{seed}"

  ai1, ai2, = *db.ais.keys.shuffle
  ai_names = [ai1, ai2]

  fail "need at least two AIs" unless ai1 and ai2

  puts "#{ai1} vs #{ai2}"

  tempfiles = []
  filenames = ai_names.map do |ai_name|
    ai = db.ais[ai_name]
    case ai['location_type']
    when 'gist'
      io = Tempfile.new('oort')
      io.write Gist.read ai['location']
      io.close
      tempfiles << io
      io.path
    when 'file'
      ai['location']
    else
      fail "unknown location type #{ai['location_type'].inspect}"
    end
  end

  results_file = Tempfile.new 'oort'
  system "./dedicated/oort_dedicated --results #{results_file.path} --seed #{seed} #{SCENARIO} #{filenames * ' '}"
  tempfiles.map(&:unlink)
  tempfiles = nil
  unless $?.success?
    results_file.unlink
    puts "simulator failed"
    return
  end

  winner_id, winner_team_name, elapsed = File.read(results_file.path).split("\t")
  winner_id = winner_id.to_i
  winner_name = ai_names[winner_id]

  puts "winner: #{winner_id} #{winner_name}"
  results_file.unlink

  # the trueskill gem is broken
  ai_names.sort_by! { |x| x == winner_name ? 0 : 1 }

  ratings = ai_names.map do |name|
    ai = db.ais[name]
    Rating.new ai['mean'], ai['deviation'], ai['activity']
  end

  ranks = [1] + [2]*(ratings.size-1)
  #pp ai_names.zip(ratings, ranks)
  graph = FactorGraph.new(ratings.map { |x| [x] }, ranks)
  graph.update_skills
  #pp ai_names.zip(ratings, ranks)

  ai_names.zip(ratings).each do |name, rating|
    puts "#{name}: d_mean=#{rating.mean-db.ais[name]['mean']} d_dev=#{rating.deviation-db.ais[name]['deviation']}"
    db.ais[name].merge!(
      'mean' => rating.mean,
      'deviation' => rating.deviation,
      'activity' => rating.activity
    )
  end

  db.save
end

$opts[:iters].times { run_game }
