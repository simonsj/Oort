#!/usr/bin/env ruby
require 'oort-tournament/db'
require 'oort-tournament/forum'
require 'trollop'

SHA1_REGEX = /\b[0-9a-fA-F]{20}\b/

$opts = Trollop.options do
  banner <<-EOS
Read the forum bot's private message queue

Usage:
       oort-tournament-bot [options]

where [options] are:
EOS

  opt :username, "Forum bot username", :short => 'u', :type => :string, :required => true
  opt :password, "Forum bot password", :short => 'p', :type => :string, :required => true
  opt :no_reply, "Don't reply to messages", :short => 'N'
  opt :database, "Location of tournament database", :short => 'D', :default => 'oort-tournament.yaml'
end

db = OortTournament::DB.new $opts[:database]

forum = OortForum.new
forum.login $opts[:username], $opts[:password]

forum.list_messages.each do |msgid|
  next if db.seen_msgids.member? msgid
  puts "processing message #{msgid}"
  begin
    msg = forum.get_message msgid

    puts "wrong site" unless msg.site == 'from: oort.lefora.com'

    puts "no gist found" unless msg.body =~ SHA1_REGEX
    gist = $&

    puts "no name found" unless msg.subject =~ /Message: (\w+)$/
    name = $1

    fail "name conflict" if db.ais.member? name

    puts "#{msg.sender.inspect} registered #{name} as #{gist}"
    db.create_ai name, msg.sender, 'gist', gist
    db.seen_msgids << msgid

    msg.reply "Your AI has been registered in the tournament." unless $opts[:no_reply]
  rescue
    puts "failed to process message #{msgid}: #{$!.message}"
    msg.reply "Failed to register AI: #{$!.message}" if msg and not $opts[:no_reply]
    #puts page.send :html_body
  end
end

db.save
